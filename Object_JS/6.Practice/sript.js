//Реализуйте функцию, которая сравнивает два объекта
//и возвращает результат сравнения в виде объекта. 
//Ключами результирующего объекта будут все ключи 
//из двух входящих объектов, а значением строка 
//с описанием отличий: added, deleted, changed или unchanged.

//Возможные значения:

//added — ключ отсутствовал в первом объекте, но был добавлен во второй
//deleted — ключ был в первом объекте, но отсутствует во втором
//changed — ключ присутствовал и в первом и во втором объектах, но значения отличаются
//unchanged — ключ присутствовал и в первом и во втором объектах с одинаковыми значениями


// const objOne = { one: 'eon', two: 'two', four: true };
// const objTwo = { two: 'own', zero: 4, four: true };


// let genDiff = (collOne, collTwo) =>{
//   const result = {};

//   const key1 = Object.keys({ ...collOne});//присваю переменной метод со всеми ключами из первого объекта
//   const key2 = Object.keys({ ...collTwo});//присваю переменной метод со всеми ключами из второго объекта
//   const val1 = Object.entries({ ...collOne});//присваиваю переменной массив с ключами и значениями первого объекта 
//   const val2 = Object.entries({ ...collTwo});//присваиваю переменной массив с ключами и значениями второго объекта 

//   let added = key2.filter( i => !key1.includes(i));//проверяю при помощи filter есть ли совпадения с ключами второго объекта с первым 
//   result[added] = 'added';//те ключи которые не прошли проверку записываю в новый объект 
  
//   let deleted = key1.filter( i => !key2.includes(i));//проверяю при помощи filter есть ли совпадения с ключами первого объекта со вторым  
//   result[deleted] = 'deleted';//те ключи которые не прошли проверку записываю в новый объект 


//   //тут перебераю ключи-значения первого и второго объекта 
//   for (const [key1, value1] of val1) {
//     for (const [key2, value2] of val2) {
//      if(key1 === key2){ //проверяю на одинаковые ключи
//       if(value1 !== value2){//проверяю на разные значения
//         result[key1] = 'changed';//те ключи которые прошли проверку записываю их в новый объект 
//       }
//      } 
//     } 
//   }
//  //тут перебераю ключи-значения первого и второго объекта 
//   for (const [key1, value1] of val1) {
//     for (const [key2, value2] of val2) {
//      if(key1 === key2){//проверяю на одинаковые ключи
//       if(value1 === value2){//проверяю на одинаковые значения
//         result[key1] = 'unchanged';//те ключи которые прошли проверку записываю их в новый объект 
//       }
//      } 
//     } 
//   }

//     return result; //возвращаю новый объект
// }
// console.log(genDiff(objOne,objTwo));

/********************************************************************************************/
/********************************************************************************************/
/********************************************************************************************/
/********************************************************************************************/
/********************************************************************************************/

//Реализуйте функцию, которая принимает на вход список параметров
//и возвращает сформированный query string из этих параметров:
//bqs({ per: 10, page: 1 });
 // page=1&per=10
//bqs({ param: 'all', param1: true });
 // param=all&param1=true

// const obj1 = { per: 10, page: 1 };
// const obj2 = { param: 'all', param1: true };

// let bqs = (coll) => {
//   const res = [];
//   const entries = Object.entries(coll).sort();
//   for (let [ key, value ] of entries) {
//     let arr = [ key, value ].join('=');
//     res.push(arr);
//   }
//   let result = res.join('&');
//   return result;
// }

// console.log(bqs(obj1));
